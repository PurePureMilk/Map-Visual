# -*- coding: utf-8 -*-
"""plot-map.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T_UwhBHHQUCww57wmOjd8eNe-maZIrmA

## Packages
"""

'''
#UNCOMMENT AND RUN THESE TO INSTALL ANY MISSING PACKAGES
!apt-get install -q libgeos-3.5.0
!apt-get install -q libgeos-dev
!pip install -q https://github.com/matplotlib/basemap/archive/master.zip
!pip install -q pyproj==1.9.6
'''

from netCDF4 import Dataset as NetCDFFile # extract the nc4 file to get geography data
import matplotlib.pyplot as plt
import numpy as np
import numpy.ma as ma
import os, sys
import numpy
# sys.maxsize
numpy.set_printoptions(threshold=100)
 
from mpl_toolkits.mplot3d import axes3d
from matplotlib import cm
 
#from google.colab import drive 
#drive.mount('/content/gdrive'); nb_path = '/content/notebooks'
#os.symlink('/content/gdrive/MyDrive/Colab Notebooks', nb_path); sys.path.insert(0, nb_path)  
 
 
#search for specific base file: find `conda info --base` -name epsg
os.environ["PROJ_LIB"] ='/opt/anaconda3/pkgs/proj4-5.2.0-h0a44026_1/share/proj/'
from mpl_toolkits.basemap import Basemap #ploting the US map; install by `conda install -c anaconda basemap`

"""# Drawing in Lambert Conformal Projection"""

geography_file = NetCDFFile("GRACEDADM_CLSM0125US_7D.A20210628.030.nc4")
 
lat = geography_file.variables['lat'][:]; lon = geography_file.variables['lon'][:]
lon, lat = np.meshgrid(lon, lat); time = geography_file.variables['time'][:]
gws_inst = geography_file.variables['gws_inst'][:] # Groundwater Percentile
rtzsm_inst = geography_file.variables["rtzsm_inst"][:] # Root Zone Soil Moisture Percentile
sfsm_inst = geography_file.variables["sfsm_inst"][:] #Surface Soil Moisture Percentile

gws_filled_data = gws_inst.filled(fill_value=np.nan)
rtzsm_filled_data = rtzsm_inst.filled(fill_value=np.nan)
sfsm_filled_data = sfsm_inst.filled(fill_value=np.nan)

#drawing in the borders with projection llc
fig = plt.figure(figsize=(2.5, 2))
map = Basemap(llcrnrlon=-119,llcrnrlat=22,urcrnrlon=-64,urcrnrlat=49,
        projection='lcc',lat_0=33, lon_0=-95)
#map.drawcoastlines(); map.drawstates(); map.drawcountries(); 
#map.drawlsmask(land_color='Linen', ocean_color='#CCFFFF') # can use HTML names or codes for colors

fig = plt.figure(figsize=(2.5, 2))
map = Basemap(llcrnrlon=-119,llcrnrlat=22,urcrnrlon=-64,urcrnrlat=49,
        projection='lcc',lat_0=33,lon_0=-95)
#map.shadedrelief(scale=0.5)

"""# Plotting on lcc projection"""

#plotting groundwater
map.pcolormesh(lon, lat, gws_filled_data[0], latlon=True, vmin=0.0,vmax=0.5, cmap= 'RdBu');
plt.clim(0, 100); map.drawcoastlines(color='lightgray'); map.drawstates(); map.drawcountries(); 
plt.title('Groundwater LLC June 28, 2021'); plt.colorbar(label='Wetness Percentile')

"""# States 3D plotting"""

'''
ax = plt.figure().add_subplot(projection='3d')
x = lon
y = lat
 
# max_value = numpy.max(arr); min/max of lat = -125/-68; min/max of lon = -124/-68
ax.scatter(x, y, zs=-20, zdir='-z', c=sfsm_filled_data[0], label='points in (x, z)')
 
# Make legend, set axes limits and labels
ax.legend()
ax.set_xlim(180, -180); ax.set_ylim(90, -60); ax.set_zlim(-50, 50)
ax.set_xlabel('X'); ax.set_ylabel('Y');
 
# Customize the view angle so it's easier to see that the scatter points lie
# on the plane y=0
#https://stackoverflow.com/questions/43831123/python-best-way-to-draw-3d-function-with-random-x-and-y
 
ax.view_init(elev=50, azim=50); plt.show()
'''

"""# Drawing & Plotting in Mercator Projection"""

#map with mercator projection
fig = plt.figure(figsize=(5, 4))
map = Basemap(llcrnrlon=-130,llcrnrlat=23,urcrnrlon=-64,urcrnrlat=50,
        projection='merc',lat_0=0, lon_0=-0)
map.drawcoastlines(); map.drawstates(); map.drawcountries(); 
map.drawlsmask(land_color='Linen', ocean_color='#f6f7f7') # can use HTML names or codes for colors
 
map.contourf(lon, lat, sfsm_filled_data[0], latlon=True, vmin=0.0,vmax=0.5, cmap= 'RdBu');
plt.clim(0, 100); map.drawcoastlines(color='lightgray'); map.drawstates(); map.drawcountries(); 
plt.title('Surface Merc June 28, 2021'); #plt.colorbar(label='Wetness Percentile')

#fig = plt.figure(figsize=(10, 8))
#map = Basemap(llcrnrlon=-121,llcrnrlat=20,urcrnrlon=-62,urcrnrlat=51, projection='lcc',lat_1=32,lat_2=45,lon_0=-95); map.shadedrelief(scale=0.5)
 
#map.pcolormesh(lon, lat, sfsm_inst.data[0], latlon=True, cmap='RdBu_r')
#plt.clim(-8, 8) map.drawcoastlines(color='lightgray'); map.drawstates(); map.drawcountries(); plt.title('sfsm 6/28/21');
#plt.colorbar(label='Wetness Percentile')

"""# Drawing Global Projection"""

global_file = NetCDFFile("GRACEDADM_CLSM025_GL_7D.A20210628.020.nc4")
 
lat = global_file.variables['lat'][:]; lon = global_file.variables['lon'][:]
lon, lat = np.meshgrid(lon, lat); time = global_file.variables['time'][:]
gws_inst = global_file.variables['gws_inst'][:] # Groundwater Percentile
rtzsm_inst = global_file.variables["rtzsm_inst"][:] # Root Zone Soil Moisture Percentile
sfsm_inst = global_file.variables["sfsm_inst"][:] #Surface Soil Moisture Percentile
 
gws_filled_data = gws_inst.filled(fill_value=np.nan)
rtzsm_filled_data = rtzsm_inst.filled(fill_value=np.nan)
sfsm_filled_data = sfsm_inst.filled(fill_value=np.nan)

"""# Plotting on Global"""

fig = plt.figure(figsize=(5*4, 4*4))
m = Basemap(projection='robin',lon_0=0,resolution='c')
m.drawcoastlines()
 
# draw parallels and meridians.
m.drawparallels(np.arange(-90.,120.,30.))
m.drawmeridians(np.arange(0.,360.,60.))
 
plt.title("Robinson Projection")
#plotting groundwater
'''
color_theme=[(52/235, 235/235, 86/235), (52/235, 70/235, 235/235), 
(165/235, 52/235, 235/235)]           
df.plot(color=color_theme)
'''

theme=[
       (0/255, 38/255, 115/255), 
       (20/255, 90/255, 0/255), 
       (20/255, 90/255, 0/255),

       (56/255, 168/255, 0/255), 
       (56/255, 168/255, 0/255), 
       (75/255, 230/255, 0/255),

       (75/255, 230/255, 0/255), 
       (170/255, 245/255, 150/255), 
       (170/255, 245/255, 150/255),

       (150/255, 150/255, 150/255), 
       (150/255, 150/255, 150/255), 
       (255/255, 255/255, 0/255),

       (255/255, 255/255, 0/255), 
       (252/255, 211/255, 127/255), 
       (252/255, 211/255, 127/255),

       (255/255, 170/255, 0/255), 
       (255/255, 170/255, 0/255), 
       (230/255, 0/255, 0/255),

       (230/255, 0/255, 0/255), 
       (115/255, 0/255, 0/255), 
       (115/255, 0/255, 0/255),
       ]           

m.contourf(lon, lat, gws_filled_data[0], colors = theme, latlon=True, vmin=0.0,vmax=100);
plt.clim(0, 100); m.drawcoastlines(color='lightgray'); m.drawstates(); m.drawcountries(); 
plt.title('Groundwater LLC June 28, 2021'); plt.colorbar(label='Wetness Percentile')

""" # Testing 3D bars"""

#reinitialized data
geography_file = NetCDFFile("GRACEDADM_CLSM0125US_7D.A20210628.030.nc4")
latitude = geography_file.variables['lat'][:]
longitude = geography_file.variables['lon'][:]
longitude, latitude = np.meshgrid(longitude, latitude)
time = geography_file.variables['time'][:]
gws_inst = geography_file.variables['gws_inst'][:] # Groundwater Percentile
rtzsm_inst = geography_file.variables["rtzsm_inst"][:] # Root Zone Soil Moisture Percentile
sfsm_inst = geography_file.variables["sfsm_inst"][:] #Surface Soil Moisture Percentile

# shape is (1, 224, 464)
ori_shape = gws_inst.shape
# turns it into an 1D array
flatten = gws_inst.data[0].flatten()
# get indexes to the values from the range; 80 < x < 95; get values `above zero`
above_zero = np.where((flatten>80) & (flatten<95))
# all actually values from 80 < 95
gws_1d = flatten[above_zero]
x = np.ravel(longitude)[above_zero]
y = np.ravel(latitude)[above_zero]
#gws_2d = gws_1d[above_zero].reshape(ori_)
 
# (1, 224, 464)
#o = open("o.txt", "w"); text = ori_shape; print(text, file=o); o.close();
# raw data; contains missing values = -999; data[0] & not data b/c we are dealing w/ 3D & just need the 2D
#g = open("g.txt", "w"); text = gws_inst.data[0]; print(text, file=g); g.close();
# raw data to 1d
#f = open("f.txt", "w"); text = flatten; print(text, file=f); f.close();
# get indexes to the values from the range; 80 < x < 95; get values `above zero`
#z = open("z.txt", "w"); text = above_zero; print(text, file=z); z.close();
# all actually values from 80 < 95
#d = open("d.txt", "w"); text = gws_1d; print(text, file=d); d.close();
# lon and lat values; ex. Maryland is Longitude: -76.641273, Latitude: 39.045753
#xf = open("xf.txt", "w"); text = x; print(text, file=xf); xf.close();
#yf = open("yf.txt", "w"); text = y; print(text, file=yf); yf.close();
 
#flatten_sort = np.sort(flatten);
#s = open("s.txt", "w"); text = flatten_sort; print(text, file=s); s.close();
gws_zero_out = np.where(gws_inst.data[0]<0, 0, gws_inst.data[0])

'''
# setup the figure and axes
fig = plt.figure(figsize=(16, 6))
#ax1 = fig.add_subplot(121, projection='3d')
#ax2 = fig.add_subplot(122, projection='3d')
 
#set the map
map = Basemap(llcrnrlon=-130,llcrnrlat=22,urcrnrlon=-64,urcrnrlat=53,fix_aspect=False)
 
#fig = plt.figure()
#ax = Axes3D(fig)
 
#this draw the 3D graph
ax = fig.add_subplot(121, projection='3d')
 
#_x = np.arange(4); #_y = np.arange(5)
#_xx, _yy = np.meshgrid(_x, _y); #x, y = _xx.ravel(), _yy.ravel()
 
 
#top = x + y
top = gws_1d; bottom = np.zeros_like(top); width = depth = 1
#print(top); print(bottom); print(width)
 
#Draw the bars
ax.bar3d(x, y, bottom, width, depth, top, shade=True)
 
#draw the borders
ax.add_collection3d(map.drawcoastlines())
ax.add_collection3d(map.drawcountries())
ax.set_title('Ground water soil moister map')
#ax2.bar3d(x, y, bottom, width, depth, top, shade=False)
#ax2.set_title('Not Shaded')
 
plt.show()
'''

"""# 3D plotting test for scatter"""

ax = plt.figure().add_subplot(projection='3d')
# lon=-110,-100; lat=30, 40 
x = lon; y = lat 
# min/max of lon = -180/180; 
# min/max of lat = -60/90; 
 
minlat,minlon=-60,-180
 
#lat/lons of selected box
 
Lowlat,uplat,leftlon,rightlon=30,40,-124,-100
 
#result = np.where((lat >= 40) & (lat < 40.3))
#print(result)
#x = np.reshape(x, 864000); y = np.reshape(y, 864000)
 
#indices: lon(224, 320), lat(360, 400)
lowlat = 30; uplat = 40;
leftlon = -124; rightlon = -100;
 
y1,y2,x1,x2=(lowlat-minlat)*4, (uplat-minlat)*4, (leftlon-minlon)*4, (rightlon-minlon)*4
print(y1); print(y2)
print(x1); print(x2)
x = x[360:400, 224:320]
y = y[360:400, 224:320]
print(x.shape)
print(y.shape)
#600*1440=864000;
#150x4*360x4; 
#-60/90 (ylat) & -180/180 (xlon)
input = rtzsm_filled_data[0]
print(input.shape)
#a_file = open("a.txt", "w"); text = gws_inst.data; print(text, file=a_file); a_file.close()
input = input[360:400, 224:320]
print(input.shape) 
ax.scatter(x, y, zs= 0, zdir='z', c=input, cmap="RdBu", label='points in (x, z)')
# Make legend, set axes limits and labels
ax.legend()
 
#ax.set_xlim(480, 520); ax.set_ylim(280, 320); ax.set_zlim(-50, 200)
#ax.set_xlim(-180, 180); ax.set_ylim(-60, 90); ax.set_zlim(-50, 200)
ax.set_xlabel('X'); ax.set_ylabel('Y');
 
# Customize the view angle so it's easier to see that the scatter points lie
# on the plane y=0
#https://stackoverflow.com/questions/43831123/python-best-way-to-draw-3d-function-with-random-x-and-y
 
ax.view_init(elev=30, azim=-70); plt.show();

'''
ax = plt.figure().add_subplot(projection='3d')
 
ax.scatter(x, y, zs=-20, zdir='-z', c=sfsm_filled_data[0], label='points in (x, z)')
 
# Make legend, set axes limits and labels
ax.legend()
ax.set_xlim(180, -180); ax.set_ylim(90, -60); ax.set_zlim(-50, 50)
ax.set_xlabel('X'); ax.set_ylabel('Y');
ax.view_init(elev=70, azim=90); plt.show();
'''

ax = plt.figure().add_subplot(projection='3d')
 
# Plot a sin curve using the x and y axes.
x = np.linspace(0, 1, 100)
y = np.sin(x * 2 * np.pi) / 2 + 0.5
ax.plot(x, y, zs=0, zdir='z', label='curve in (x, y)')
 
# Plot scatterplot data (20 2D points per colour) on the x and z axes.
colors = ('r', 'g', 'b', 'k')
 
# Fixing random state for reproducibility
np.random.seed(19680801)
 
x = np.random.sample(5 * len(colors)); y = np.random.sample(5 * len(colors))
c_list = []
for c in colors:
    c_list.extend([c] * 5)
# By using zdir='y', the y value of these points is fixed to the zs value 0
# and the (x, y) points are plotted on the x and z axes.
ax.scatter(x, y, zs=0, zdir='y', c=c_list, label='points in (x, z)')
 
# Make legend, set axes limits and labels
ax.legend()
ax.set_xlim(0, 1); ax.set_ylim(0, 1); ax.set_zlim(0, 1)
ax.set_xlabel('X'); ax.set_ylabel('Y'); ax.set_zlabel('Z')
 
# Customize the view angle so it's easier to see that the scatter points lie
# on the plane y=0
ax.view_init(elev=20., azim=-35)
 
plt.show()

"""# 3d surface plot"""

'''
fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
 
#X = lon
#Y = lat
X = np.arange(-180, 180, .25)
Y = np.arange(-60, 90, .25)
X, Y = np.meshgrid(X, Y)
print(x.shape)
print(y.shape)
#R = np.sqrt(X**2 + Y**2)
#Z = np.sin(0.1*X)
#print(Z.shape)
#a_file = open("sfsm.txt", "w"); text = sfsm_filled_data[0]; print(text, file=a_file); a_file.close()

input = rtzsm_filled_data[0]

for i in range(600):
    for j in range(1440):
        if(input[i][j] > 50):
            input[i][j] = np.nan


surf = ax.plot_surface(X, Y, input, cmap=cm.RdBu, linewidth=0, antialiased=False, vmin = 0, vmax = 100)
#ax.scatter(x, y, zs=-20, zdir='-z', c=sfsm_filled_data[0], label='points in (x, z)')
 
# Customize the z axis.
ax.set_zlim(0, 100)
 
# Add a color bar which maps values to colors.
fig.colorbar(surf, shrink=.5, aspect=5)
 
ax.view_init(elev=30, azim=-70)
'''

fig, ax = plt.subplots(subplot_kw={"projection": "3d"}) 
#X = lon
#Y = lat
#x = x[360:400, 224:320]
#y = y[360:400, 224:320]

X = np.arange(-180, 180, .25)
Y = np.arange(-60, 90, .25)
X, Y = np.meshgrid(X, Y)

input = rtzsm_filled_data[0]
for i in range(600):
    for j in range(1440):
        if(input[i][j] > 50):
            input[i][j] = np.nan

subinput = input[360:400, 224:320]
#print(subinput)
print(np.min(subinput))
print(np.max(subinput))
subx = X[360:400, 224:320]
suby = Y[360:400, 224:320]

surf = ax.plot_surface(subx, suby, subinput, cmap=cm.RdBu, linewidth=0, antialiased=False, vmin = 0, vmax = 100)
 
# Customize the z axis.
ax.set_zlim(0, 100)
 
# Add a color bar which maps values to colors.
fig.colorbar(surf, shrink=.5, aspect=5)
 
ax.view_init(elev=20, azim=-90)

fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
 
# Make data.
X = np.arange(-5, 5, 0.25)
Y = np.arange(-5, 5, 0.25)
X, Y = np.meshgrid(X, Y)
R = np.sqrt(X**2 + Y**2)
Z = np.sin(R)
 
# Plot the surface.
surf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,
                       linewidth=0, antialiased=False)
print(Z.shape)
# Customize the z axis.
ax.set_zlim(-1.01, 1.01)
 
# Add a color bar which maps values to colors.
fig.colorbar(surf, shrink=0.5, aspect=5)
 
plt.show()

import plotly.graph_objects as go
 
import pandas as pd
 
# Read data from a csv
z_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv')
input = sfsm_filled_data[0]
df = pd.DataFrame(input)
print(df.size)
fig = go.Figure(data=[go.Surface(z=df)])
 
fig.update_layout(title='Mt Bruno Elevation', autosize=False,
                  width=500, height=500,
                  margin=dict(l=65, r=50, b=65, t=90))
 
fig.show()